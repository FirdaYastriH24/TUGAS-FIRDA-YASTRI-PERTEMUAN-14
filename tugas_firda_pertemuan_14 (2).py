# -*- coding: utf-8 -*-
"""TUGAS FIRDA PERTEMUAN 14

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a2GcvQGaR5I1vKGGIOoQZcTstfYGE2TQ
"""

import json
import os
from datetime import datetime
'''json: Untuk membaca dan menyimpan data dalam format .json.

os: Untuk berinteraksi dengan sistem file (misalnya, membuat folder backup).

datetime: Untuk mencatat waktu backup file.'''


class Barang:
    """
    Menyimpan informasi barang.
    """
    def __init__(self, kode, nama, stok):
        self.kode = kode
        self.nama = nama
        self.stok = stok

    def tampilkan_info(self):
        print(f"Kode: {self.kode}, Nama: {self.nama}, Stok: {self.stok}")

    def to_dict(self):
        return {"kode": self.kode, "nama": self.nama, "stok": self.stok}

        '''CLASS Barang
Kelas ini merepresentasikan satu barang dalam sistem inventaris.

python
class Barang:
    def __init__(self, kode, nama, stok):
        ...
Fungsi-fungsi:
__init__: Konstruktor yang menerima kode, nama, dan stok barang.

tampilkan_info: Menampilkan info barang ke layar.

to_dict: Mengubah objek Barang menjadi dictionary (agar bisa disimpan ke file JSON).'''


class Inventaris:
    """
    Mengelola daftar barang, laporan, dan backup.
    """
    DATA_FILE = 'data_inventaris.json'
    BACKUP_DIR = 'backups'

    def __init__(self):
        self.daftar_barang = []
        self.load_data()

    def load_data(self):
        if os.path.exists(self.DATA_FILE):
            with open(self.DATA_FILE, 'r') as f:
                data = json.load(f)
                for d in data:
                    self.daftar_barang.append(Barang(d["kode"], d["nama"], d["stok"]))
        else:
            self.daftar_barang = []

    def save_data(self):
        with open(self.DATA_FILE, 'w') as f:
            json.dump([b.to_dict() for b in self.daftar_barang], f, indent=2)

    def backup_data(self):
        os.makedirs(self.BACKUP_DIR, exist_ok=True)
        ts = datetime.now().strftime('%Y%m%d_%H%M%S')
        path = os.path.join(self.BACKUP_DIR, f'inventaris_backup_{ts}.json')
        with open(path, 'w') as f:
            json.dump([b.to_dict() for b in self.daftar_barang], f, indent=2)
        print(f"Backup berhasil: {path}")  # metode folder backup filesystem :contentReference[oaicite:3]{index=3}

    def tambah_barang(self, barang):
        if self.cari_barang(barang.kode):
            print(f"Kode {barang.kode} sudah ada, gunakan update.")
            return
        self.daftar_barang.append(barang)
        print("Barang berhasil ditambahkan.")

    def hapus_barang(self, kode):
        awal = len(self.daftar_barang)
        self.daftar_barang = [b for b in self.daftar_barang if b.kode != kode]
        if len(self.daftar_barang) < awal:
            print(f"Barang dengan kode {kode} dihapus.")
        else:
            print("Kode barang tidak ditemukan.")

    def cari_barang(self, kode):
        for b in self.daftar_barang:
            if b.kode == kode:
                return b
        return None

    def tampilkan_semua(self):
        if not self.daftar_barang:
            print("Inventaris kosong.")
            return
        print("=== Daftar Barang ===")
        for b in self.daftar_barang:
            b.tampilkan_info()

    def generate_report(self):
        print("=== Laporan Inventaris ===")
        print(f"{'Kode':6} | {'Nama':20} | {'Stok':5}")
        print("-"*40)
        total = 0
        for b in self.daftar_barang:
            print(f"{b.kode:6} | {b.nama:20} | {b.stok:5}")
            total += b.stok
        print("-"*40)
        print(f"Total item: {len(self.daftar_barang)}, Total stok keseluruhan: {total}\n")
        '''CLASS Inventaris
Kelas utama untuk mengelola daftar barang dan operasional inventaris.

python
class Inventaris:
    DATA_FILE = 'data_inventaris.json'
    BACKUP_DIR = 'backups'

DATA_FILE: Nama file tempat data utama disimpan.
BACKUP_DIR: Nama folder tempat menyimpan backup data.

Fungsi-fungsi:
__init__
python
def __init__(self):
    self.daftar_barang = []
    self.load_data()

Inisialisasi daftar barang.
Langsung memuat data dari file JSON jika ada.

load_data
python
def load_data(self):
    if os.path.exists(self.DATA_FILE):
        ...
Membaca data dari file JSON.
Setiap entri dikonversi menjadi objek Barang

save_data
python
def save_data(self):
    ...
Menyimpan seluruh data barang dalam bentuk JSON.

backup_data
python
def backup_data(self):
    ...
Membuat folder backups (jika belum ada).
Menyimpan file backup dengan nama berdasarkan timestamp
Memberi tahu user bahwa backup berhasil.

tambah_barang
python
def tambah_barang(self, barang):
    ...
Menambahkan barang baru ke daftar jika belum ada kode yang sama.

hapus_barang
python
def hapus_barang(self, kode):
    ...
Menghapus barang berdasarkan kode.
Dicek apakah jumlah list berubah setelah penghapusan (berarti berhasil).

cari_barang
python
def cari_barang(self, kode):
    ...
Mencari barang berdasarkan kode. Return objek barang jika ditemukan.

tampilkan_semua
python
def tampilkan_semua(self):
    ...
Menampilkan seluruh barang di inventaris.

generate_report
python
def generate_report(self):
    ...
Menampilkan laporan inventaris dalam format tabel.
Menampilkan total jumlah barang dan total stok keseluruhan.'''


def main():
    inv = Inventaris()

    while True:
        print("\nMenu:")
        print("1. Tambah Barang")
        print("2. Hapus Barang")
        print("3. Tampilkan Semua")
        print("4. Cari Barang")
        print("5. Laporan")
        print("6. Backup Data")
        print("7. Simpan & Keluar")
        pilihan = input("Pilih (1–7): ")

        if pilihan == "1":
            kode = input("Kode barang: ")
            nama = input("Nama barang: ")
            try:
                stok = int(input("Stok barang: "))
                inv.tambah_barang(Barang(kode, nama, stok))
            except ValueError:
                print("Stok harus berupa angka!")

        elif pilihan == "2":
            kode = input("Kode barang yang akan dihapus: ")
            inv.hapus_barang(kode)

        elif pilihan == "3":
            inv.tampilkan_semua()

        elif pilihan == "4":
            kode = input("Kode barang untuk dicari: ")
            b = inv.cari_barang(kode)
            if b:
                print("Barang ditemukan:")
                b.tampilkan_info()
            else:
                print("Barang tidak ditemukan.")

        elif pilihan == "5":
            inv.generate_report()

        elif pilihan == "6":
            inv.backup_data()

        elif pilihan == "7":
            inv.save_data()
            print("Data disimpan. Keluar program. Terima kasih.")
            break

        else:
            print("Pilihan tidak valid, coba lagi.")

if __name__ == "__main__":
    main()

    '''FUNGSI main()
Fungsi utama sebagai interface menu.

Alur:
Membuat objek Inventaris.

Menampilkan menu:
1. Tambah Barang
2. Hapus Barang
3. Tampilkan Semua
4. Cari Barang
5. Laporan
6. Backup Data
7. Simpan & Keluar

Menunggu input user, lalu mengeksekusi perintah sesuai pilihan.
Looping terus hingga user memilih “7” untuk keluar dan menyimpan data.

Contoh Input:
Pilih (1–7): 1
Kode barang: B001
Nama barang: Pena
Stok barang: 100
→ Barang berhasil ditambahkan.'''